[project]
name = "chemlit-extractor"
version = "0.1.0"
description = "Web interface for extracting chemical data from journal articles"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.13"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Chemistry",
]
dependencies = [
  "alembic>=1.16.1",
  "fastapi>=0.115.12",
  "httpx>=0.28.1",
  "jinja2>=3.1.6",
  "polars>=1.30.0",
  "psycopg2-binary>=2.9.10",
  "psycopg[binary]>=3.2.9",
  "pydantic>=2.11.5",
  "pydantic-settings>=2.9.1",
  "python-dotenv>=1.1.0",
  "python-multipart>=0.0.20",
  "python-slugify>=8.0.4",
  "rdkit>=2025.3.2",
  "sqlalchemy>=2.0.41",
  "uvicorn[standard]>=0.34.2",
]

[dependency-groups]
dev = [
  "httpx>=0.28.1",
  "mypy>=1.16.0",
  "pre-commit>=4.2.0",
  "pytest>=8.3.5",
  "pytest-asyncio>=1.0.0",
  "pytest-cov>=6.1.1",
  "ruff>=0.11.12",
  "ty>=0.0.1a7",
  "types-requests>=2.32.0.20250515",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings  
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
]
ignore = [
  "E501", # line too long, handled by formatter
  "B008", # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"] # Allow unused args and asserts in tests

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
major_version_zero = true
